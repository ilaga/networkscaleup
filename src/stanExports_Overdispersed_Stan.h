// Generated by rstantools.  Do not edit by hand.

/*
    networkscaleup is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    networkscaleup is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with networkscaleup.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_Overdispersed_Stan_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 37> locations_array__ =
  {" (found before start of program)",
  " (in 'Overdispersed_Stan', line 7, column 2 to column 21)",
  " (in 'Overdispersed_Stan', line 8, column 2 to column 20)",
  " (in 'Overdispersed_Stan', line 9, column 2 to column 43)",
  " (in 'Overdispersed_Stan', line 10, column 2 to column 28)",
  " (in 'Overdispersed_Stan', line 11, column 2 to column 15)",
  " (in 'Overdispersed_Stan', line 12, column 2 to column 27)",
  " (in 'Overdispersed_Stan', line 15, column 2 to column 50)",
  " (in 'Overdispersed_Stan', line 16, column 2 to column 32)",
  " (in 'Overdispersed_Stan', line 17, column 2 to column 28)",
  " (in 'Overdispersed_Stan', line 20, column 2 to column 60)",
  " (in 'Overdispersed_Stan', line 19, column 16 to line 21, column 2)",
  " (in 'Overdispersed_Stan', line 19, column 1 to line 21, column 2)",
  " (in 'Overdispersed_Stan', line 18, column 17 to line 22, column 3)",
  " (in 'Overdispersed_Stan', line 18, column 2 to line 22, column 3)",
  " (in 'Overdispersed_Stan', line 24, column 1 to column 35)",
  " (in 'Overdispersed_Stan', line 23, column 17 to line 25, column 3)",
  " (in 'Overdispersed_Stan', line 23, column 2 to line 25, column 3)",
  " (in 'Overdispersed_Stan', line 28, column 2 to column 34)",
  " (in 'Overdispersed_Stan', line 29, column 2 to column 38)",
  " (in 'Overdispersed_Stan', line 32, column 6 to column 48)",
  " (in 'Overdispersed_Stan', line 31, column 21 to line 33, column 5)",
  " (in 'Overdispersed_Stan', line 31, column 4 to line 33, column 5)",
  " (in 'Overdispersed_Stan', line 30, column 18 to line 34, column 3)",
  " (in 'Overdispersed_Stan', line 30, column 2 to line 34, column 3)",
  " (in 'Overdispersed_Stan', line 2, column 2 to column 19)",
  " (in 'Overdispersed_Stan', line 3, column 2 to column 19)",
  " (in 'Overdispersed_Stan', line 4, column 8 to column 11)",
  " (in 'Overdispersed_Stan', line 4, column 12 to column 15)",
  " (in 'Overdispersed_Stan', line 4, column 2 to column 23)",
  " (in 'Overdispersed_Stan', line 7, column 9 to column 12)",
  " (in 'Overdispersed_Stan', line 8, column 9 to column 12)",
  " (in 'Overdispersed_Stan', line 9, column 27 to column 30)",
  " (in 'Overdispersed_Stan', line 15, column 18 to column 21)",
  " (in 'Overdispersed_Stan', line 16, column 18 to column 21)",
  " (in 'Overdispersed_Stan', line 16, column 22 to column 25)",
  " (in 'Overdispersed_Stan', line 17, column 18 to column 21)"};
#include <stan_meta_header.hpp>
class model_Overdispersed_Stan final : public model_base_crtp<model_Overdispersed_Stan> {
private:
  int n_i;
  int n_k;
  std::vector<std::vector<int>> y;
public:
  ~model_Overdispersed_Stan() {}
  model_Overdispersed_Stan(stan::io::var_context& context__, unsigned int
                           random_seed__ = 0, std::ostream*
                           pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_Overdispersed_Stan_namespace::model_Overdispersed_Stan";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 25;
      context__.validate_dims("data initialization", "n_i", "int",
        std::vector<size_t>{});
      n_i = std::numeric_limits<int>::min();
      current_statement__ = 25;
      n_i = context__.vals_i("n_i")[(1 - 1)];
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "n_i", n_i, 0);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "n_k", "int",
        std::vector<size_t>{});
      n_k = std::numeric_limits<int>::min();
      current_statement__ = 26;
      n_k = context__.vals_i("n_k")[(1 - 1)];
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "n_k", n_k, 0);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("y", "n_i", n_i);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("y", "n_k", n_k);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(n_i),
          static_cast<size_t>(n_k)});
      y = std::vector<std::vector<int>>(n_i,
            std::vector<int>(n_k, std::numeric_limits<int>::min()));
      {
        std::vector<int> y_flat__;
        current_statement__ = 29;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
          current_statement__ = 29;
          for (int sym2__ = 1; sym2__ <= n_i; ++sym2__) {
            current_statement__ = 29;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 29;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 30;
      stan::math::validate_non_negative_index("alphas", "n_i", n_i);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("betas", "n_k", n_k);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("inv_omegas", "n_k", n_k);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("omegas", "n_k", n_k);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("par1", "n_i", n_i);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("par1", "n_k", n_k);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("par2", "n_k", n_k);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_i + n_k + n_k + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_Overdispersed_Stan";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_Overdispersed_Stan_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alphas =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_i, DUMMY_VAR__);
      current_statement__ = 1;
      alphas = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_i);
      Eigen::Matrix<local_scalar_t__,-1,1> betas =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_k, DUMMY_VAR__);
      current_statement__ = 2;
      betas = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_k);
      Eigen::Matrix<local_scalar_t__,-1,1> inv_omegas =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_k, DUMMY_VAR__);
      current_statement__ = 3;
      inv_omegas = in__.template read_constrain_lub<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1,
                     lp__, n_k);
      local_scalar_t__ sigma_alpha = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_alpha = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      local_scalar_t__ mu_beta = DUMMY_VAR__;
      current_statement__ = 5;
      mu_beta = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_beta = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_beta = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> omegas =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_k, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(omegas, stan::math::elt_divide(1.0, inv_omegas),
        "assigning variable omegas");
      Eigen::Matrix<local_scalar_t__,-1,-1> par1 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_i, n_k,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> par2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_k, DUMMY_VAR__);
      current_statement__ = 14;
      for (int i = 1; i <= n_i; ++i) {
        current_statement__ = 12;
        for (int k = 1; k <= n_k; ++k) {
          current_statement__ = 10;
          stan::model::assign(par1,
            (stan::math::exp(
               (stan::model::rvalue(alphas, "alphas",
                  stan::model::index_uni(i)) +
               stan::model::rvalue(betas, "betas", stan::model::index_uni(k))))
            /
            (stan::model::rvalue(omegas, "omegas", stan::model::index_uni(k))
            - 1.0)), "assigning variable par1", stan::model::index_uni(i),
            stan::model::index_uni(k));
        }
      }
      current_statement__ = 17;
      for (int k = 1; k <= n_k; ++k) {
        current_statement__ = 15;
        stan::model::assign(par2, (1.0 /
          (stan::model::rvalue(omegas, "omegas", stan::model::index_uni(k)) -
          1.0)), "assigning variable par2", stan::model::index_uni(k));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "omegas", omegas, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "par1", par1, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "par2", par2, 0);
      {
        current_statement__ = 18;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alphas, 0,
                         sigma_alpha));
        current_statement__ = 19;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(betas, mu_beta,
                         sigma_beta));
        current_statement__ = 24;
        for (int k = 1; k <= n_k; ++k) {
          current_statement__ = 22;
          for (int i = 1; i <= n_i; ++i) {
            current_statement__ = 20;
            lp_accum__.add(stan::math::neg_binomial_lpmf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i),
                               stan::model::index_uni(k)),
                             stan::model::rvalue(par1, "par1",
                               stan::model::index_uni(i),
                               stan::model::index_uni(k)),
                             stan::model::rvalue(par2, "par2",
                               stan::model::index_uni(k))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_Overdispersed_Stan_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> alphas =
        Eigen::Matrix<double,-1,1>::Constant(n_i,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alphas = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_i);
      Eigen::Matrix<double,-1,1> betas =
        Eigen::Matrix<double,-1,1>::Constant(n_k,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      betas = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_k);
      Eigen::Matrix<double,-1,1> inv_omegas =
        Eigen::Matrix<double,-1,1>::Constant(n_k,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      inv_omegas = in__.template read_constrain_lub<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1,
                     lp__, n_k);
      double sigma_alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma_alpha = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      double mu_beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      mu_beta = in__.template read<local_scalar_t__>();
      double sigma_beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sigma_beta = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> omegas =
        Eigen::Matrix<double,-1,1>::Constant(n_k,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> par1 =
        Eigen::Matrix<double,-1,-1>::Constant(n_i, n_k,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> par2 =
        Eigen::Matrix<double,-1,1>::Constant(n_k,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(alphas);
      out__.write(betas);
      out__.write(inv_omegas);
      out__.write(sigma_alpha);
      out__.write(mu_beta);
      out__.write(sigma_beta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 7;
      stan::model::assign(omegas, stan::math::elt_divide(1.0, inv_omegas),
        "assigning variable omegas");
      current_statement__ = 14;
      for (int i = 1; i <= n_i; ++i) {
        current_statement__ = 12;
        for (int k = 1; k <= n_k; ++k) {
          current_statement__ = 10;
          stan::model::assign(par1,
            (stan::math::exp(
               (stan::model::rvalue(alphas, "alphas",
                  stan::model::index_uni(i)) +
               stan::model::rvalue(betas, "betas", stan::model::index_uni(k))))
            /
            (stan::model::rvalue(omegas, "omegas", stan::model::index_uni(k))
            - 1.0)), "assigning variable par1", stan::model::index_uni(i),
            stan::model::index_uni(k));
        }
      }
      current_statement__ = 17;
      for (int k = 1; k <= n_k; ++k) {
        current_statement__ = 15;
        stan::model::assign(par2, (1.0 /
          (stan::model::rvalue(omegas, "omegas", stan::model::index_uni(k)) -
          1.0)), "assigning variable par2", stan::model::index_uni(k));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "omegas", omegas, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "par1", par1, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "par2", par2, 0);
      if (emit_transformed_parameters__) {
        out__.write(omegas);
        out__.write(par1);
        out__.write(par2);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alphas =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_i, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alphas,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_i),
        "assigning variable alphas");
      out__.write(alphas);
      Eigen::Matrix<local_scalar_t__,-1,1> betas =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_k, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(betas,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_k),
        "assigning variable betas");
      out__.write(betas);
      Eigen::Matrix<local_scalar_t__,-1,1> inv_omegas =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_k, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(inv_omegas,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_k),
        "assigning variable inv_omegas");
      out__.write_free_lub(0, 1, inv_omegas);
      local_scalar_t__ sigma_alpha = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_alpha);
      local_scalar_t__ mu_beta = DUMMY_VAR__;
      current_statement__ = 5;
      mu_beta = in__.read<local_scalar_t__>();
      out__.write(mu_beta);
      local_scalar_t__ sigma_beta = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_beta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alphas", "double",
        std::vector<size_t>{static_cast<size_t>(n_i)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "betas", "double",
        std::vector<size_t>{static_cast<size_t>(n_k)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "inv_omegas",
        "double", std::vector<size_t>{static_cast<size_t>(n_k)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_alpha",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mu_beta",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma_beta",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alphas =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_i, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alphas_flat__;
        current_statement__ = 1;
        alphas_flat__ = context__.vals_r("alphas");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_i; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(alphas, alphas_flat__[(pos__ - 1)],
            "assigning variable alphas", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alphas);
      Eigen::Matrix<local_scalar_t__,-1,1> betas =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_k, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> betas_flat__;
        current_statement__ = 2;
        betas_flat__ = context__.vals_r("betas");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(betas, betas_flat__[(pos__ - 1)],
            "assigning variable betas", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(betas);
      Eigen::Matrix<local_scalar_t__,-1,1> inv_omegas =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_k, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> inv_omegas_flat__;
        current_statement__ = 3;
        inv_omegas_flat__ = context__.vals_r("inv_omegas");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(inv_omegas, inv_omegas_flat__[(pos__ - 1)],
            "assigning variable inv_omegas", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, inv_omegas);
      local_scalar_t__ sigma_alpha = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_alpha = context__.vals_r("sigma_alpha")[(1 - 1)];
      out__.write_free_lb(0, sigma_alpha);
      local_scalar_t__ mu_beta = DUMMY_VAR__;
      current_statement__ = 5;
      mu_beta = context__.vals_r("mu_beta")[(1 - 1)];
      out__.write(mu_beta);
      local_scalar_t__ sigma_beta = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_beta = context__.vals_r("sigma_beta")[(1 - 1)];
      out__.write_free_lb(0, sigma_beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alphas", "betas", "inv_omegas",
                "sigma_alpha", "mu_beta", "sigma_beta"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"omegas", "par1", "par2"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_i)},
                std::vector<size_t>{static_cast<size_t>(n_k)},
                std::vector<size_t>{static_cast<size_t>(n_k)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_k)},
             std::vector<size_t>{static_cast<size_t>(n_i),
               static_cast<size_t>(n_k)},
             std::vector<size_t>{static_cast<size_t>(n_k)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_i; ++sym1__) {
      param_names__.emplace_back(std::string() + "alphas" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
      param_names__.emplace_back(std::string() + "betas" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
      param_names__.emplace_back(std::string() + "inv_omegas" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_alpha");
    param_names__.emplace_back(std::string() + "mu_beta");
    param_names__.emplace_back(std::string() + "sigma_beta");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
        param_names__.emplace_back(std::string() + "omegas" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_i; ++sym2__) {
          param_names__.emplace_back(std::string() + "par1" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
        param_names__.emplace_back(std::string() + "par2" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_i; ++sym1__) {
      param_names__.emplace_back(std::string() + "alphas" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
      param_names__.emplace_back(std::string() + "betas" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
      param_names__.emplace_back(std::string() + "inv_omegas" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_alpha");
    param_names__.emplace_back(std::string() + "mu_beta");
    param_names__.emplace_back(std::string() + "sigma_beta");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
        param_names__.emplace_back(std::string() + "omegas" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_i; ++sym2__) {
          param_names__.emplace_back(std::string() + "par1" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_k; ++sym1__) {
        param_names__.emplace_back(std::string() + "par2" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alphas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_i) + "},\"block\":\"parameters\"},{\"name\":\"betas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_k) + "},\"block\":\"parameters\"},{\"name\":\"inv_omegas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_k) + "},\"block\":\"parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omegas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"par1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_i) + ",\"cols\":" + std::to_string(n_k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_k) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alphas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_i) + "},\"block\":\"parameters\"},{\"name\":\"betas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_k) + "},\"block\":\"parameters\"},{\"name\":\"inv_omegas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_k) + "},\"block\":\"parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omegas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"par1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_i) + ",\"cols\":" + std::to_string(n_k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_k) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((n_i + n_k) + n_k) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((n_k +
      (n_i * n_k)) + n_k));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((n_i + n_k) + n_k) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((n_k +
      (n_i * n_k)) + n_k));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_Overdispersed_Stan_namespace::model_Overdispersed_Stan;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_Overdispersed_Stan_namespace::profiles__;
}
#endif
#endif
